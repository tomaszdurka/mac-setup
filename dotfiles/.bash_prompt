if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM=xterm-256color
fi

if tput setaf 1 &> /dev/null; then
	tput sgr0
	if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
		MAGENTA=$(tput setaf 9)
		ORANGE=$(tput setaf 172)
		GREEN=$(tput setaf 190)
		PURPLE=$(tput setaf 141)
		WHITE=$(tput setaf 0)
	else
		MAGENTA=$(tput setaf 5)
		ORANGE=$(tput setaf 4)
		GREEN=$(tput setaf 2)
		PURPLE=$(tput setaf 1)
		WHITE=$(tput setaf 7)
	fi
	BOLD=$(tput bold)
	RESET=$(tput sgr0)
else
	MAGENTA="\033[1;31m"
	ORANGE="\033[1;33m"
	GREEN="\033[1;32m"
	PURPLE="\033[1;34m"
	WHITE="\033[1;37m"
	BOLD=""
	RESET="\033[m"
fi

export MAGENTA
export ORANGE
export GREEN
export PURPLE
export WHITE
export BOLD
export RESET

function parse_git_dirty() {
	[[ $(git status 2> /dev/null | tail -n1) != *"working directory clean"* ]] && echo "*"
}

function get_branch_title() {
	BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
    IFS='-' read -ra PARTS <<< "$BRANCH"
    if [ "${PARTS[0]}" != "issue" ]; then
		echo ${BRANCH}
	else
    	echo "#${PARTS[1]}"
    fi
}

function parse_git_branch() {
	BRANCH=$(get_branch_title)
	if [ "${BRANCH}" != "" ]; then
		echo "$BRANCH" | sed -e "s/\(.*\)/ (\1$(parse_git_dirty))/"
	fi
}

export PS1="\u@\h:\w\[$ORANGE\]\$(parse_git_branch)\[$RESET\]\$ "
export PS2="\[$ORANGE\]â†’ \[$RESET\]"
